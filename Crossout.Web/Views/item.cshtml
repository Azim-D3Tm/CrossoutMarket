@{
    Layout = "layout.cshtml";
}

@using System.Collections.Generic
@using System.Linq
@using Crossout.Model.Recipes
@using Crossout.Web
@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<Crossout.Web.Models.ItemModel>

@Html.Partial("header", null)

<div class="panel">
    <div class="panel-body">
        <h3>Recipe</h3>
        <table class="table table-hover table-condensed">
            <thead>
            <tr>
                <th>
                    Name
                </th>
                <th>
                    Rarity
                </th>
                <th>
                    <div class="text-left pull-left">Number</div>
                    <div class="text-right clearfix rec-right">Sell Price</div>
                </th>
                <th>
                </th>
                <th>
                    <div class="text-left pull-left">Number</div>
                    <div class="text-right clearfix rec-right">Buy Price</div>
                </th>
            </tr>
            </thead>

            <tbody>
            @Html.Partial("recipepart", Model.Recipe.Recipe)


            @ShowTree(Model.Recipe.Recipe.Ingredients)

            @helper ShowTree(List<RecipeItem> items)
            {
                foreach (RecipeItem item in items)
                {
                    @Html.Partial("recipepart", item)

                    if (item != null && item.Ingredients.Count > 0)
                    {
                        @ShowTree(item.Ingredients)
                        ;
                    }
                    if (item.IngredientSum != null)
                    {
                        @Html.Partial("recipepart", item.IngredientSum)
                    }
                }
            }

            @if (Model.Recipe.Recipe.IngredientSum != null)
            {
                @Html.Partial("recipepart", Model.Recipe.Recipe.IngredientSum)
            }
            </tbody>
        </table>
    </div>
</div>

<div class="panel">
    <div class="panel-body">
        <h3>Shopping List</h3>
        <table class="table table-hover table-condensed">
            <thead>
            <tr>
                <th>
                    Name
                </th>
                <th>
                    Rarity
                </th>
                <th>
                    Number
                </th>
                <th>
                    <div class="text-right clearfix rec-right">Sell Price</div>
                </th>
                <th>
                </th>
                <th>
                    <div class="text-right clearfix rec-right">Buy Price</div>
                </th>
            </tr>
            </thead>

            <tbody>

            </tbody>
        </table>
    </div>
</div>

<script>

    var recipeData = {
        loaded: false,
        data: {}
    };

    $.getJSON('http://@(WebSettings.Settings.DataHost)/data/recipe/@(Model.Item.Id)',function(data) {
        recipeData.data = data;
        recipeData.loaded = true;
    });

    function updateTree(classname, recipe, uniqueid, show) {
        if(classname !== 'recipe-0'){
            $('.' + classname).each(function (i, obj) {
                var currentUniqueid = $(this).data('uniqueid');
                var currentParentUniqueid = $(this).data('parentuniqueid');
                var currentRecipe = $(this).data('recipe');
                var classname2 = 'recipe-' + $(this).data('recipe');
                if (currentParentUniqueid === uniqueid) {
                    if (show) {
                        $(this).show();
                    } else {
                        $(this).hide();
                        $(this).find('button').removeClass('glyphicon-minus').addClass('glyphicon-plus');
                        window.updateTree(classname2, currentRecipe, currentUniqueid, show);
                    }
                }
            });
        }
    }

    function toPrice(number) {
        return (number / 100.0).toFixed(2);
    }

    function updateSums(recipe, uniqueid) {
        if (recipeData.loaded){
            $('.sum-row:visible').each(function (j, obj) {
                var sumuniqueid = $(this).data('uniqueid');
            
                var root = recipeData.data.Recipe.Recipe;
                var mainItem = findSumItem(root, sumuniqueid);
                var sumItem = mainItem.IngredientSum;
                var sumItemResults = { items: new Array(), map: {} }
                
                if(sumItem !== null){
                    updateSum(root, mainItem, sumItemResults, recipe);

                    var sumBuy = 0;
                    var sumSell = 0;
                    for (var i = 0; i < sumItemResults.items.length; i++) {
                        sumBuy += sumItemResults.items[i].buy;
                        sumSell += sumItemResults.items[i].sell;
                    }

                    $('#uniqueid-' + sumItem.UniqueId).find('.sum-sell').text(toPrice(sumSell));
                    $('#uniqueid-' + sumItem.UniqueId).find('.sum-buy').text(toPrice(sumBuy));

                    var sellPrice = mainItem.Item.SellPrice * Math.max(1, mainItem.Number);
                    var buyPrice = mainItem.Item.BuyPrice * Math.max(1, mainItem.Number);

<<<<<<< Updated upstream
                    var sellFeePrice = sumSell * 0.9;
                    var buyFeePrice = sumBuy * 0.9;


                    $('#uniqueid-' + sumItem.UniqueId).find('.sum-sell-fee').text('= ' + toPrice(sellFeePrice));
                    $('#uniqueid-' + sumItem.UniqueId).find('.sum-buy-fee').text('= ' + toPrice(buyFeePrice));

                    var sellProfit = sellPrice - sellFeePrice;
                    var buyProfit = buyPrice - buyFeePrice;

                    var sellClass = sellProfit > 0 ? 'sum-pos' : 'sum-neg';
                    var buyClass = buyProfit > 0 ? 'sum-pos' : 'sum-neg';
=======
                    var sellFeePrice = sellPrice * 0.9;
                    var buyFeePrice = buyPrice * 0.9;
                    
                    var sellProfit = sellFeePrice - sumSell;
                    var buyProfit = buyFeePrice - sumBuy;
                    var sellBuyProfit = sellFeePrice - sumBuy;

                    var sellClass = sellProfit > 0 ? 'sum-pos' : 'sum-neg';
                    var buyClass = buyProfit > 0 ? 'sum-pos' : 'sum-neg';
                    var sellBuyClass = sellBuyProfit > 0 ? 'sum-pos' : 'sum-neg';
                    
                    $('#uniqueid-' + sumItem.UniqueId).find('.sum-sell-fee').text(toPrice(sellFeePrice));
                    $('#uniqueid-' + sumItem.UniqueId).find('.sum-buy-fee').text(toPrice(buyFeePrice));

                    $('#uniqueid-' + sumItem.UniqueId).find('.sum-sell').text(toPrice(-sumSell));
                    $('#uniqueid-' + sumItem.UniqueId).find('.sum-buy').text(toPrice(-sumBuy));
>>>>>>> Stashed changes

                    $('#uniqueid-' + sumItem.UniqueId).find('.sum-sell-diff').removeClass('sum-neg').removeClass('sum-pos').addClass(sellClass).text(toPrice(sellProfit));
                    $('#uniqueid-' + sumItem.UniqueId).find('.sum-buy-diff').removeClass('sum-neg').removeClass('sum-pos').addClass(buyClass).text(toPrice(buyProfit));
                    $('#uniqueid-' + sumItem.UniqueId).find('.sum-sell-buy-diff').removeClass('sum-neg').removeClass('sum-pos').addClass(sellBuyClass).text(toPrice(sellBuyProfit));
                }
            });
        }
    }

    // Maybe someone can make this easier
    function updateSum(root, item, result, recipe) {
        var valueSet = false;
        var foundItem = null;
        for (var i = 0; i < item.Ingredients.length; i++) {
            updateSum(root, item.Ingredients[i], result, recipe);
            var subItem = item.Ingredients[i];
            if (!result.map.hasOwnProperty(subItem.UniqueId)) {
                if ($('#uniqueid-' + subItem.UniqueId).is(":visible")) {
                    if (!subItem.IsSumRow) {
                        result.items.push({
                            sell: subItem.SellPriceTimesNumber * Math.max(1, item.Number),
                            buy: subItem.BuyPriceTimesNumber * Math.max(1, item.Number)
                        });
                        valueSet = true;
                        foundItem = subItem;
                    }
                }
            }
        }
        if (valueSet && foundItem != null) {
            result.map[foundItem.ParentUniqueId] = true;
        }
    }

    function findSumItem(item, uniqueid) {
        if (item.IngredientSum !== null && item.IngredientSum.UniqueId === uniqueid) {
            return item;
        }

        for (var i = 0; i < item.Ingredients.length; i++) {
            var rs = findSumItem(item.Ingredients[i], uniqueid);
            if (rs) return rs;
        }
        return null;
    }
</script>

@Html.Partial("chart", Model)